import { Component, OnInit } from '@angular/core';
import { ReservationService, Reservation } from '../services/reservation/reservation.service';
import { AuthService } from '../services/auth/auth.service';
import { DeviceService } from '../services/device/device.service';

@Component({
  selector: 'app-reservation-management',
  templateUrl: './reservation-management.component.html',
  styleUrls: ['./reservation-management.component.css'],
})
export class ReservationManagementComponent implements OnInit {
  reservations: any[] = []; // Liste enrichie
  displayedReservations: any[] = []; // Liste filtr√©e
  searchTerm: string = ''; // Terme de recherche

  dialogReservation: Partial<Reservation> = {
    user: '',
    deviceId: '',
    borrowStartDate: undefined,
    borrowEndDate: undefined,
  };

  isDialogOpen: boolean = false;
  isEditing: boolean = false;

  constructor(
    private reservationService: ReservationService,
    private authService: AuthService,
    private deviceService: DeviceService
  ) {}

  ngOnInit(): void {
    this.loadReservations();
  }

  loadReservations(): void {
    console.log('üîµ [D√©but] Chargement des r√©servations...');

    this.reservationService.getReservations().subscribe(
      (reservations) => {
        console.log('‚úÖ [Step 1] R√©servations brutes r√©cup√©r√©es:', reservations);

        const enrichedReservations: any[] = [];
        reservations.forEach((reservation, index) => {
          console.log(`üîÑ [Step 2] Traitement de la r√©servation ID: ${reservation.id}`, reservation);

          // R√©cup√©rer les d√©tails de l'utilisateur
          this.authService.getUserDetails(reservation.user).subscribe(
            (user) => {
              console.log(`üë§ [Step 3] D√©tails de l'utilisateur r√©cup√©r√©s pour ${reservation.user}:`, user);

              // R√©cup√©rer les d√©tails de l'appareil
              this.deviceService.getDeviceById(reservation.deviceId).subscribe(
                (device) => {
                  console.log(`üì± [Step 4] D√©tails de l'appareil r√©cup√©r√©s pour ${reservation.deviceId}:`, device);

                  // Ajouter la r√©servation enrichie √† la liste
                  const enrichedReservation = {
                    ...reservation,
                    userFullName: user ? `${user.prenom} ${user.nom}` : 'Utilisateur inconnu',
                    deviceName: device ? device.name : 'Appareil inconnu',
                    deviceReference: device ? device.reference : 'R√©f√©rence inconnue',
                    deviceVersion: device ? device.version : 'Version inconnue',
                  };

                  console.log('üéØ [Step 5] R√©servation enrichie:', enrichedReservation);
                  enrichedReservations.push(enrichedReservation);

                  // V√©rifier si c'est la derni√®re r√©servation
                  if (index === reservations.length - 1) {
                    this.reservations = enrichedReservations;
                    this.displayedReservations = enrichedReservations;
                    console.log('‚úÖ [Final] Toutes les r√©servations enrichies:', this.displayedReservations);
                  }
                },
                (error) => {
                  console.error(`‚ùå [Erreur Appareil] Impossible de r√©cup√©rer l'appareil pour ID ${reservation.deviceId}:`, error);
                }
              );
            },
            (error) => {
              console.error(`‚ùå [Erreur Utilisateur] Impossible de r√©cup√©rer l'utilisateur pour ID ${reservation.user}:`, error);
            }
          );
        });
      },
      (error) => {
        console.error('‚ùå [Erreur] Impossible de charger les r√©servations:', error);
      }
    );
  }

  // Filtrer les r√©servations en fonction du terme de recherche
  filterReservations(): void {
    console.log('üîç [Filtrage] Terme de recherche:', this.searchTerm);

    this.displayedReservations = this.reservations.filter(
      (reservation) =>
        reservation.userFullName?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        reservation.deviceName?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        reservation.deviceReference?.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
        (reservation.borrowStartDate &&
          new Date(reservation.borrowStartDate).toLocaleDateString().includes(this.searchTerm)) ||
        (reservation.borrowEndDate &&
          new Date(reservation.borrowEndDate).toLocaleDateString().includes(this.searchTerm))
    );

    console.log('üìä [R√©sultats apr√®s filtrage] displayedReservations:', this.displayedReservations);
  }

  // Ouvrir la modal pour ajouter ou modifier une r√©servation
  openDialog(reservation?: any): void {
    console.log('üü¢ [Modal] Ouverture avec r√©servation:', reservation);

    this.isDialogOpen = true;
    this.isEditing = !!reservation;
    this.dialogReservation = reservation
      ? { ...reservation }
      : { user: '', deviceId: '', borrowStartDate: undefined, borrowEndDate: undefined };
  }

  // Enregistrer une r√©servation (ajouter ou modifier)
  saveDialogReservation(): void {
    console.log('üíæ [Enregistrement] Tentative de sauvegarde:', this.dialogReservation);

    if (this.isEditing) {
      this.reservationService.updateReservation(this.dialogReservation.id!, this.dialogReservation as Reservation).then(
        () => {
          alert('‚úÖ R√©servation modifi√©e avec succ√®s !');
          this.loadReservations();
          this.closeDialog();
        },
        (error) => {
          console.error('‚ùå Erreur lors de la modification :', error);
          alert('Impossible de modifier cette r√©servation.');
        }
      );
    } else {
      this.reservationService.addReservation(this.dialogReservation as Reservation).then(
        () => {
          alert('‚úÖ R√©servation ajout√©e avec succ√®s !');
          this.loadReservations();
          this.closeDialog();
        },
        (error) => {
          console.error('‚ùå Erreur lors de l\'ajout :', error);
          alert('Impossible d\'ajouter cette r√©servation.');
        }
      );
    }
  }

  // Fermer la modal
  closeDialog(): void {
    console.log('üî¥ [Modal] Fermeture de la modal');

    this.isDialogOpen = false;
    this.dialogReservation = { user: '', deviceId: '', borrowStartDate: undefined, borrowEndDate: undefined };
    this.isEditing = false;
  }

  // Supprimer une r√©servation
  deleteReservation(id: string): void {
    console.log('üóë [Suppression] Tentative de suppression de ID:', id);

    if (confirm('√ätes-vous s√ªr de vouloir supprimer cette r√©servation ?')) {
      this.reservationService.deleteReservation(id).then(
        () => {
          alert('‚úÖ R√©servation supprim√©e avec succ√®s !');
          this.loadReservations();
        },
        (error) => {
          console.error('‚ùå Erreur lors de la suppression :', error);
          alert('Impossible de supprimer cette r√©servation.');
        }
      );
    }
  }
}
